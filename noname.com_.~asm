.model tiny
.stack 64
.data
HEX_CONV            DB '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
ascii_result        db 4 dup(?)
buffer_ascii        dw ?
num                 db '1','1','1','1'
res                 dw ?
OP1_STRING          DB 'AX~~'
OP2_STRING          DB 'BX~~'
OP1_SIZE DB 0
OP2_SIZE DB 0
PLAYER1 EQU 0
PLAYER2 EQU 0FFH
PLAYER_INPUT_STRING DW 0
INPUT_STRING        DB 'mov ax,11',10
ESC_SCODE EQU 1
F1_SCODE EQU 03bh
F2_SCODE EQU 03ch
F4_SCODE EQU 03EH
PLAYER1_MEMORY DB 16 DUP(7)
vv db 'z2df'
T1 DB ?
T2 DB ?
input_buffer DB 15,?,15 dup(?)
buffer_num DW 0
PLAYER1_POINTS DW 0
current_exec_cpu dw 0
current_exec_op1 dw 0
current_exec_op2 dw 0
AX_REG_2 LABEL WORD
AL_REG_2 DB 023H
AH_REG_2 DB 05H

BX_REG_2 LABEL WORD
BL_REG_2 DB 099H
BH_REG_2 DB 0ECH

CX_REG_2 LABEL WORD
CL_REG_2 DB ?
CH_REG_2 DB ?

DX_REG_2 LABEL WORD
DL_REG_2 DB ?
DH_REG_2 DB ?

SI_REG_2 DW ?
DI_REG_2 DW ?
BP_REG_2 DW ?
SP_REG_2 DW ?
AX_REG_1 LABEL WORD
AL_REG_1 DB 0ABH
AH_REG_1 DB 0CDH

BX_REG_1 LABEL WORD
BL_REG_1 DB 03FH
BH_REG_1 DB 09EH

CX_REG_1 LABEL WORD
CL_REG_1 DB 033H
CH_REG_1 DB 0ACH

DX_REG_1 LABEL WORD
DL_REG_1 DB 0EAH
DH_REG_1 DB 0FFH

SI_REG_1 DW 0BFADH
DI_REG_1 DW 099FH
BP_REG_1 DW 01H
SP_REG_1 DW 0155H
current_instruction_width dw 0
REG16_NAMES DB 'AX','BX','CX','DX','SI','DI','BP','SP' ; REGISTER 16 BIT 8 REGISTER
REG16_Address DB '[BX]','[SI]','[DI]','[BP]','[00]','[01]','[02]','[03]','[04]','[05]','[06]','[07]','[08]','[09]','[0A]','[0B]','[0C]','[0D]','[0E]','[0F]' ; ADDRESS REGISTER
NUM_ADDRESS DB '[00]','[01]','[02]','[03]','[04]','[05]','[06]','[07]','[08]','[09]','[0A]','[0B]','[0C]','[0D]','[0E]','[0F]'
REG16_Address_16 DB '[BX]','[SI]','[DI]','[BP]'
REG8_NAMES DB 'AL','BL','CL','DL','AH','BH','CH','DH' ; REGISTER 8 BIT 8 REGISTER
NUM_HEXA DB '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F' ;  NUMBER TO CHECK FOR FOUR BIT
INSTRUCTIONS_CONV DB 'PUSH ','OR ','POP ','MOV ','NOP ','ADD ','SUB ','XOR ','AND ','SHR ','SHL ','SAR ','ROR ','INC ','DEC ','ROL ','ADC ','SBB ','CLC ','RCR ','RCL '

.code

ConvertDecimalToASCII MACRO data,result

LEA SI,result
MOV AX,data
MOV DX,0
mov CX,10D
DIV CX

ADD AX,30H
ADD DX,30H
MOV [SI],AX
INC SI
MOV [SI],DX


ENDM
display_string_color MACRO x_pos,y_pos,msg,len,attr


LEA BP,msg      ; Msg to print must be in BP -> ES:BP
MOV AX,attr

MOV BL,AL     ; Attribute
MOV BH,0
; MOV BH,BL
; MOV CL,4
; SHR BH,CL
MOV AH,13h
MOV AL,01b      ; bit 0 = 1 ->inc cursor,
; bit 1 = 0 ->string does not contain attributes

MOV CX,len
MOV DH,y_pos
MOV DL,x_pos

INT 10H

ENDM
move_cursor MACRO X_POS,Y_POS
MOV AH,01H
MOV CH,0FH
MOV AH,2
MOV DH,y_pos
MOV DL,x_pos
MOV BH,0
INT 10H

ENDM
newline MACRO
mov ah,2
mov dl,10
int 21h
mov ah,2
mov dl,13
int 21h
ENDM
splitops macro
LOCAL CHECK_SPACE, SPLIT_OP1, SPLIT_OP2,SPLIT_OP2_LOOP,ENDED
MOV OP1_SIZE,0
MOV OP1_SIZE,2

LEA SI,INPUT_STRING
LEA DI,OP1_STRING
;;;;;;;;;;;;;;;;;;;CHECK FOR SPACE;;;;;;;;;;;;;;;;;
CHECK_SPACE:
INC SI
MOV AL,[SI]
CMP AL,20H
JNZ CHECK_SPACE
JZ SPLIT_OP1

;;;;;;;;;;;;;;;;;;;;;SPLIT OP1;;;;;;;;;;;;;;;;;;;;
SPLIT_OP1:
INC SI
MOV DL,[SI]
CMP DL,2CH
JZ  SPLIT_OP2
CMP DL,10
JZ ENDED
MOV [DI],DL
INC DI
CMP DL,2CH
INC OP1_SIZE
JNZ SPLIT_OP1
;;;;;;;;;;;;;;;;;;;;;;;SPLIT OP2;;;;;;;;;;;;;;;;;;;;;
SPLIT_OP2:
LEA DI,OP2_STRING
SPLIT_OP2_LOOP:
INC SI
CMP [SI],10
JZ ENDED
MOV DL,[SI]
MOV [DI],DL
INC DI
INC OP2_SIZE
JMP SPLIT_OP2_LOOP
ENDED:
endm
checkHex MACRO var,len

LOCAL HEX,NOT_HEX,LOWER,UPPER,SKIP,CHECKING
LEA SI,var ; Pointer to number
MOV CL,len    ; Length of number (2/4 chars.)

CHECKING:
MOV AL,[SI]
;Check if number
SUB AL,48
CMP AL,9 ;57-48
JA  HEX
;ELSE-> NUMBER FROM 0-9
JMP  SKIP
;-------HEXADECIMAL CASE FOR UPPER OR LOWER CASE LETTERS-------;
HEX:
ADD AL,48

;CHECK IF UPPERCASE OR LOWER
SUB AL,65
CMP AL,15  ;70-65
JBE  UPPER
ADD AL,65

SUB AL,97
CMP AL,5 ; 102-97
JBE  LOWER
JMP  NOT_HEX
UPPER:
ADD AL,70
SUB AL,60 ; 70-10
JMP  SKIP
LOWER:
ADD AL,97
SUB AL,87 ; 97 - 10
JMP  SKIP
SKIP:
INC SI
DEC CL
JNZ  CHECKING
NOT_HEX:
CMP CL,0      ; To check if hex, CL should be zero, so ZF = 1
ENDM
read_string MACRO msg
MOV AH,0AH
LEA DX,msg
INT 21H
ENDM
ConvertToDecimal MACRO var,len,buffer,result
LOCAL CONVERT,HEX,FINISH,SKIP,SKIP2,BYTES_2, DONE,UPPER,LOWER

MOV CH,len  ; Size of variable (1 or 2 bytes)
SHL CH,1    ; Multiply by 2 -> since we need to loop 4 times if 2 bytes (FFFF) or 2 times if 1 byte (FF)
MOV CL,4
LEA BX,var
MOV AX,2
CMP AX,2
JZ  BYTES_2
MOV DX,16   ; Variable is 1 byte so max divisor is 16 (16^1)
JMP  DONE
BYTES_2:
MOV DX,4096 ; Variable is 2 bytes so max divisor is 4096 (16^3)
DONE:

MOV buffer,0; Clear buffer first

CONVERT:
;16^= 4096  256   16      1
;var= F      F     F      F
;BX = 0      1     2      3
;SHL= 2      4     4      x
MOV AH,0    ; Clear AH before multiplication
MOV AL,[BX] ; Get first character

;Check if number
SUB AL,48
CMP AL,9 ;57-48
JG  HEX
;ELSE-> NUMBER FROM 0-9
JMP  SKIP
;-------HEXADECIMAL CASE FOR UPPER OR LOWER CASE LETTERS-------;
HEX:
ADD AL,48

;CHECK IF UPPERCASE OR LOWER
SUB AL,65
CMP AL,15  ;70-65
JBE  UPPER
ADD AL,65

SUB AL,97
CMP AL,5 ; 102-97
JBE  LOWER

UPPER:
ADD AL,70
SUB AL,60 ; 70-10
JMP  SKIP
LOWER:
ADD AL,97
SUB AL,87 ; 97 - 10
JMP  SKIP
SKIP:
PUSH DX     ; Backup DX since it will change during multiplication
MUL DX      ; Multiply by 16^CX
POP DX      ; Retrieve old value of DX
ADD buffer,AX ; Buffer = AX + oldBuffer
FINISH:
; Divide DL by BL
SHR DX,CL    ; Divide divisor by 16 (2^4)
INC BX      ; Get next character
DEC  CH     ; Decrement counter
JNZ  CONVERT
; Move final result to destination
MOV AX,buffer
MOV result,AX
ENDM

main proc far
mov  ax,@data
mov  ds,ax
MOV AX,13h  ; 320x200 256 colors
;MOV AX,06H  ; 640x200 16  colors
MOV BH,0H   ; First page on screen
INT 10H


MOV_OPERAND:
MOV SI,OFFSET OP1_STRING    ;get OFFSET OF OP1
MOV AL,[SI]
MOV DI,OFFSET REG16_NAMES   ; COMPARE IF OP1 IS 16-BIT REG
MOV BL,[DI]
MOV CX,8
;;;;;;;;;;;;;;;;;;;;;;;; CHECK OPERAND1 16 BIT REG ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CHECK_REG16:
CMP CX,0         ; IF ZERO MEAN CHECK IF OP1 8 BIT REG
;JZ CHECK_REG8
CMPSW            ; IF OP1 EXIST CHECK OP2 MATCHING WITH OP1
JZ CHECK_OP2_16  ; CHECK ADDRESS OP2
INC DI
INC DI
DEC CX
JNZ CHECK_REG16 ; IF NOT CHECK NEXT OPERAND IN ARRAY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CHECK OP2 REGISTER IS 16 BIT REG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CHECK_OP2_16:
MOV BX,1
MOV current_instruction_width,BX
MOV AX,[DI]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;COMPARE TO ECEXUTE REG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; COMPARE AX TO EXECUTE
CMP AX ,'AX'
JZ OP1_EXEC_AX
JNZ OP1_CHECK_BX
OP1_EXEC_AX:
CMP current_exec_cpu , PLAYER1
JNZ OP1_CPU_PLAYER2_AX
LEA SI,AX_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op1,SI
OP1_CPU_PLAYER2_AX:
LEA SI,AX_REG_2
MOV current_exec_op1,SI


; COMPARE BX TO EXECUTE
OP1_CHECK_BX:
CMP AX ,'BX'
JZ OP1_EXEC_BX
JNZ OP1_CHECK_CX
OP1_EXEC_BX:
CMP current_exec_cpu , PLAYER1
JNZ OP1_CPU_PLAYER2_BX
LEA SI,BX_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op1,SI
OP1_CPU_PLAYER2_BX:
LEA SI,BX_REG_2
MOV current_exec_op1,SI

; COMPARE CX TO EXECUTE
OP1_CHECK_CX:
CMP AX ,'CX'
JZ OP1_EXEC_CX
JNZ OP1_CHECK_DX
OP1_EXEC_CX:
CMP current_exec_cpu , PLAYER1
JNZ OP1_CPU_PLAYER2_CX
LEA SI,CX_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op1,SI
OP1_CPU_PLAYER2_CX:
LEA SI,CX_REG_2
MOV current_exec_op1,SI


; COMPARE DX TO EXECUTE
OP1_CHECK_DX:
CMP AX ,'DX'
JZ OP1_EXEC_DX
JNZ OP1_CHECK_SI
OP1_EXEC_DX:
CMP current_exec_cpu , PLAYER1
JNZ OP1_CPU_PLAYER2_DX
LEA SI,DX_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op1,SI
OP1_CPU_PLAYER2_DX:
LEA SI,DX_REG_2
MOV current_exec_op1,SI

; COMPARE SI TO EXECUTE
OP1_CHECK_SI:
CMP AX ,'SI'
JZ OP1_EXEC_SI
JNZ OP1_CHECK_DI
OP1_EXEC_SI:
CMP current_exec_cpu , PLAYER1
JNZ OP1_CPU_PLAYER2_SI
LEA SI,SI_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op1,SI
OP1_CPU_PLAYER2_SI:
LEA SI,SI_REG_2
MOV current_exec_op1,SI

; COMPARE DI TO EXECUTE
OP1_CHECK_DI:
CMP AX ,'DI'
JZ OP1_EXEC_DI
JNZ OP1_CHECK_BP
OP1_EXEC_DI:
CMP current_exec_cpu , PLAYER1
JNZ OP1_CPU_PLAYER2_DI
LEA SI,DI_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op1,SI
OP1_CPU_PLAYER2_DI:
LEA SI,DI_REG_2
MOV current_exec_op1,SI


; COMPARE BP TO EXECUTE
OP1_CHECK_BP:
CMP AX ,'BP'
JZ OP1_EXEC_BP
JNZ OP1_CHECK_SP
OP1_EXEC_BP:
CMP current_exec_cpu , PLAYER1
JNZ OP1_CPU_PLAYER2_BP
LEA SI,BP_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op1,SI
OP1_CPU_PLAYER2_BP:
LEA SI,BP_REG_2
MOV current_exec_op1,SI

; COMPARE SP TO EXECUTE
OP1_CHECK_SP:
CMP AX ,'SP'
JZ OP1_EXEC_SP
JNZ INVALID_INPUT
OP1_EXEC_SP:
CMP current_exec_cpu , PLAYER1
JNZ OP1_CPU_PLAYER2_SP
LEA SI,SP_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op1,SI
OP1_CPU_PLAYER2_SP:
LEA SI,SP_REG_2
MOV current_exec_op1,SI
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;FINISH SET OP1 VALID ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

MOV SI,OFFSET OP2_STRING
MOV AL,[SI]
MOV DI,OFFSET REG16_NAMES
MOV BL,[DI]
MOV CX,7

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CHECK OPERAND2-16-BIT REG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CHECK_REG16_OP2:
CMP CX,0
;JZ OP2_ADDRESS                ; IF OP2 IS NOT REGISTER JZ TO CHECK IF IT IS ADDRESS
CMPSW                         ; CPMPARE OP2 16 BIT IF YES JUMP VALID AND OP2 = 16
JZ OP2_INTIALIZE_16           ; valid And JUMP MOVE INSTRUCTION
INC DI
INC DI
DEC CX
JNZ CHECK_REG16_OP2           ; IF NOT ZERO CHECK FOR OTHER REG IN ARRAY


OP2_INTIALIZE_16:
; COMPARE AX TO EXECUTE
CMP AX ,'AX'
JZ OP2_EXEC_AX
JNZ OP2_CHECK_BX
OP2_EXEC_AX:
CMP current_exec_cpu , PLAYER1
JNZ OP2_CPU_PLAYER2_AX
LEA SI,AX_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op2,SI
OP2_CPU_PLAYER2_AX:
LEA SI,AX_REG_2
MOV current_exec_op2,SI


; COMPARE BX TO EXECUTE
OP2_CHECK_BX:
CMP AX ,'BX'
JZ OP2_EXEC_BX
JNZ OP2_CHECK_CX
OP2_EXEC_BX:
CMP current_exec_cpu , PLAYER1
JNZ OP2_CPU_PLAYER2_BX
LEA SI,BX_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op2,SI
OP2_CPU_PLAYER2_BX:
LEA SI,BX_REG_2
MOV current_exec_op2,SI

; COMPARE CX TO EXECUTE
OP2_CHECK_CX:
CMP AX ,'CX'
JZ OP2_EXEC_CX
JNZ OP2_CHECK_DX
OP2_EXEC_CX:
CMP current_exec_cpu , PLAYER1
JNZ OP2_CPU_PLAYER2_CX
LEA SI,CX_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op2,SI
OP2_CPU_PLAYER2_CX:
LEA SI,CX_REG_2
MOV current_exec_op2,SI


; COMPARE DX TO EXECUTE
OP2_CHECK_DX:
CMP AX ,'DX'
JZ OP2_EXEC_DX
JNZ OP2_CHECK_SI
OP2_EXEC_DX:
CMP current_exec_cpu , PLAYER1
JNZ OP2_CPU_PLAYER2_DX
LEA SI,DX_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op2,SI
OP2_CPU_PLAYER2_DX:
LEA SI,DX_REG_2
MOV current_exec_op2,SI

; COMPARE SI TO EXECUTE
OP2_CHECK_SI:
CMP AX ,'SI'
JZ OP2_EXEC_SI
JNZ OP2_CHECK_DI
OP2_EXEC_SI:
CMP current_exec_cpu , PLAYER1
JNZ OP2_CPU_PLAYER2_SI
LEA SI,SI_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op2,SI
OP2_CPU_PLAYER2_SI:
LEA SI,SI_REG_2
MOV current_exec_op2,SI

; COMPARE DI TO EXECUTE
OP2_CHECK_DI:
CMP AX ,'DI'
JZ OP2_EXEC_DI
JNZ OP2_CHECK_BP
OP2_EXEC_DI:
CMP current_exec_cpu , PLAYER1
JNZ OP2_CPU_PLAYER2_DI
LEA SI,DI_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op2,SI
OP2_CPU_PLAYER2_DI:
LEA SI,DI_REG_2
MOV current_exec_op2,SI


; COMPARE BP TO EXECUTE
OP2_CHECK_BP:
CMP AX ,'BP'
JZ OP2_EXEC_BP
JNZ OP2_CHECK_SP
OP2_EXEC_BP:
CMP current_exec_cpu , PLAYER1
JNZ OP2_CPU_PLAYER2_BP
LEA SI,BP_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op2,SI
OP2_CPU_PLAYER2_BP:
LEA SI,BP_REG_2
MOV current_exec_op2,SI

; COMPARE SP TO EXECUTE
OP2_CHECK_SP:
CMP AX ,'SP'
JZ OP2_EXEC_SP
JNZ INVALID_INPUT
OP2_EXEC_SP:
CMP current_exec_cpu , PLAYER1
JNZ OP2_CPU_PLAYER2_SP
LEA SI,SP_REG_1
;LEA SI,AX_REG_1
MOV current_exec_op1,SI
OP2_CPU_PLAYER2_SP:
LEA SI,SP_REG_2
MOV current_exec_op1,SI



INVALID_INPUT:


main endp
getKeyPressed PROC
MOV AH,1
MOV AL,0
INT 16H
RET
getKeyPressed ENDP
end main

